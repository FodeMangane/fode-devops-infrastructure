#!/bin/bash

# =============================================================================
# SCRIPT DE CR√âATION DU BUCKET BACKEND S3 - Fode-DevOps
# =============================================================================

set -e

# Variables
BUCKET_NAME="fode-devops-terraform-state"
REGION="us-east-1"
DYNAMODB_TABLE="fode-devops-terraform-locks"

echo "üöÄ Cr√©ation de l'infrastructure backend Terraform pour Fode-DevOps"
echo "=================================================="

# V√©rifier que AWS CLI est configur√©
if ! aws sts get-caller-identity &>/dev/null; then
    echo "‚ùå AWS CLI n'est pas configur√©. Veuillez configurer vos credentials AWS."
    exit 1
fi

echo "‚úÖ AWS CLI configur√©"

# Cr√©er le bucket S3 pour l'√©tat Terraform
echo "üì¶ Cr√©ation du bucket S3: $BUCKET_NAME"
if aws s3 mb "s3://$BUCKET_NAME" --region "$REGION"; then
    echo "‚úÖ Bucket S3 cr√©√© avec succ√®s"
else
    echo "‚ö†Ô∏è  Le bucket existe peut-√™tre d√©j√†, v√©rification..."
    if aws s3 ls "s3://$BUCKET_NAME" &>/dev/null; then
        echo "‚úÖ Le bucket existe d√©j√†"
    else
        echo "‚ùå Erreur lors de la cr√©ation du bucket"
        exit 1
    fi
fi

# Activer le versioning sur le bucket
echo "üîÑ Activation du versioning..."
aws s3api put-bucket-versioning \
    --bucket "$BUCKET_NAME" \
    --versioning-configuration Status=Enabled

# Activer le chiffrement par d√©faut
echo "üîí Activation du chiffrement AES256..."
aws s3api put-bucket-encryption \
    --bucket "$BUCKET_NAME" \
    --server-side-encryption-configuration '{
        "Rules": [
            {
                "ApplyServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                }
            }
        ]
    }'

# Bloquer l'acc√®s public
echo "üõ°Ô∏è  Blocage de l'acc√®s public..."
aws s3api put-public-access-block \
    --bucket "$BUCKET_NAME" \
    --public-access-block-configuration \
    BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true

# Cr√©er la table DynamoDB pour le verrouillage
echo "üîê Cr√©ation de la table DynamoDB: $DYNAMODB_TABLE"
if aws dynamodb create-table \
    --table-name "$DYNAMODB_TABLE" \
    --attribute-definitions AttributeName=LockID,AttributeType=S \
    --key-schema AttributeName=LockID,KeyType=HASH \
    --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
    --region "$REGION" \
    --tags Key=Name,Value="Terraform State Lock" Key=Project,Value="Fode-DevOps" \
    &>/dev/null; then
    echo "‚úÖ Table DynamoDB cr√©√©e avec succ√®s"
else
    echo "‚ö†Ô∏è  La table existe peut-√™tre d√©j√†, v√©rification..."
    if aws dynamodb describe-table --table-name "$DYNAMODB_TABLE" --region "$REGION" &>/dev/null; then
        echo "‚úÖ La table existe d√©j√†"
    else
        echo "‚ùå Erreur lors de la cr√©ation de la table DynamoDB"
        exit 1
    fi
fi

# Attendre que la table soit active
echo "‚è≥ Attente de l'activation de la table DynamoDB..."
aws dynamodb wait table-exists --table-name "$DYNAMODB_TABLE" --region "$REGION"

echo ""
echo "üéâ Infrastructure backend cr√©√©e avec succ√®s!"
echo "=================================================="
echo "Bucket S3: s3://$BUCKET_NAME"
echo "Table DynamoDB: $DYNAMODB_TABLE"
echo "R√©gion: $REGION"
echo ""
echo "Vous pouvez maintenant utiliser ce backend dans votre configuration Terraform:"
echo ""
cat <<EOF
terraform {
  backend "s3" {
    bucket         = "$BUCKET_NAME"
    key            = "terraform.tfstate"
    region         = "$REGION"
    dynamodb_table = "$DYNAMODB_TABLE"
    encrypt        = true
  }
}
EOF