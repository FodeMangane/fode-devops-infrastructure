# =============================================================================
# DEPLOY.YML - GitHub Actions Workflow pour Fode-DevOps Infrastructure
# =============================================================================

name: üöÄ Fode-DevOps Infrastructure Deployment

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - 'ansible/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'ansible/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action √† effectuer'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.6.0'
  ANSIBLE_VERSION: '2.15'
  AWS_DEFAULT_REGION: 'us-east-1'

jobs:
  # =============================================================================
  # JOB 1: VALIDATION ET S√âCURIT√â
  # =============================================================================
  validation:
    name: üîç Validation et S√©curit√©
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: üîë Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
        chmod 600 ~/.ssh/id_rsa.pub
        # Cr√©er aussi le r√©pertoire keys dans terraform si n√©cessaire
        mkdir -p ./terraform/keys
        cp ~/.ssh/id_rsa.pub ./terraform/keys/
        
    - name: üîç Terraform Format et Auto-correction
      working-directory: ./terraform
      run: |
        # Formater automatiquement tous les fichiers
        terraform fmt -recursive
        
        # V√©rifier s'il y a des changements apr√®s formatage
        if ! git diff --quiet; then
          echo "üìù Fichiers format√©s automatiquement"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Auto-Format"
          git add .
          git commit -m "üîß Auto-format Terraform files [skip ci]"
          git push
          echo "‚úÖ Changements de formatage committ√©s automatiquement"
        else
          echo "‚úÖ Tous les fichiers sont d√©j√† correctement format√©s"
        fi
      
    - name: ‚úÖ Terraform Validate
      working-directory: ./terraform
      run: |
        terraform init -backend=false
        terraform validate
        
    - name: üîí Security Scan avec Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ./terraform
        framework: terraform
        output_format: cli
      continue-on-error: true

  # =============================================================================
  # JOB 2: TERRAFORM PLAN
  # =============================================================================
  terraform-plan:
    name: üìã Terraform Plan
    runs-on: ubuntu-latest
    needs: validation
    if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: üîë Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
        chmod 600 ~/.ssh/id_rsa.pub
        # Cr√©er aussi le r√©pertoire keys dans terraform
        mkdir -p ./terraform/keys
        cp ~/.ssh/id_rsa.pub ./terraform/keys/
        
    - name: üîê Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
        
    - name: üì¶ Terraform Init
      working-directory: ./terraform
      run: terraform init
      
    - name: üìã Terraform Plan
      working-directory: ./terraform
      run: |
        terraform plan -out=tfplan \
          -var="project_name=fode-devops" \
          -var="environment=${{ github.ref_name }}" \
          -var="aws_region=${{ env.AWS_DEFAULT_REGION }}" \
          -var="instance_type=t2.micro"
          
    - name: üíæ Save Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: ./terraform/tfplan
        retention-days: 30

  # =============================================================================
  # JOB 3: TERRAFORM APPLY
  # =============================================================================
  terraform-apply:
    name: üöÄ Terraform Apply
    runs-on: ubuntu-latest
    needs: [validation, terraform-plan]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.inputs.action == 'apply')
    environment: production
    outputs:
      instance_ip: ${{ steps.terraform-outputs.outputs.instance_ip }}
      instance_id: ${{ steps.terraform-outputs.outputs.instance_id }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
        
    - name: üîë Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
        chmod 600 ~/.ssh/id_rsa.pub
        # Cr√©er aussi le r√©pertoire keys dans terraform
        mkdir -p ./terraform/keys
        cp ~/.ssh/id_rsa.pub ./terraform/keys/
        
    - name: üîê Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
        
    - name: üì¶ Terraform Init
      working-directory: ./terraform
      run: terraform init
      
    - name: üöÄ Terraform Apply
      working-directory: ./terraform
      run: |
        terraform apply -auto-approve \
          -var="project_name=fode-devops" \
          -var="environment=production" \
          -var="aws_region=${{ env.AWS_DEFAULT_REGION }}" \
          -var="instance_type=t2.micro"
          
    - name: üì§ Export Terraform Outputs
      id: terraform-outputs
      working-directory: ./terraform
      run: |
        INSTANCE_IP=$(terraform output -raw public_ip)
        INSTANCE_ID=$(terraform output -raw instance_id)
        echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
        echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
        
    - name: üìä Create Deployment Summary
      run: |
        echo "## üöÄ D√©ploiement Fode-DevOps R√©ussi!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Informations du d√©ploiement:" >> $GITHUB_STEP_SUMMARY
        echo "- **Instance ID:** ${{ steps.terraform-outputs.outputs.instance_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **IP Publique:** ${{ steps.terraform-outputs.outputs.instance_ip }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL:** http://${{ steps.terraform-outputs.outputs.instance_ip }}" >> $GITHUB_STEP_SUMMARY
        echo "- **R√©gion:** ${{ env.AWS_DEFAULT_REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environnement:** production" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # JOB 4: CONFIGURATION ANSIBLE (OPTIONNEL)
  # =============================================================================
  ansible-config:
    name: ‚öôÔ∏è Configuration Ansible
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üì¶ Install Ansible
      run: |
        pip install ansible==${{ env.ANSIBLE_VERSION }}
        ansible --version
        
    - name: üîë Setup SSH Key for Ansible
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
        chmod 600 ~/.ssh/id_rsa
        chmod 644 ~/.ssh/id_rsa.pub
        
    - name: üîê Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
        
    - name: ‚öôÔ∏è Run Ansible Playbook (Amazon Linux 2023)
      working-directory: ./ansible
      run: |
        # Utiliser l'IP de l'output du job pr√©c√©dent
        INSTANCE_IP="${{ needs.terraform-apply.outputs.instance_ip }}"
        
        # Cr√©er l'inventaire dynamique pour Amazon Linux 2023
        echo "[web]" > inventory/hosts
        echo "$INSTANCE_IP" >> inventory/hosts
        
        # Ajouter les variables pour Amazon Linux 2023
        echo "" >> inventory/hosts
        echo "[web:vars]" >> inventory/hosts
        echo "ansible_user=ec2-user" >> inventory/hosts
        echo "ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory/hosts
        echo "ansible_python_interpreter=/usr/bin/python3" >> inventory/hosts
        echo "ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> inventory/hosts
        
        # Ex√©cuter le playbook pour Amazon Linux 2023 (si il existe)
        if [ -f playbooks/site.yml ]; then
          ansible-playbook -i inventory/hosts playbooks/site.yml
        fi

  # =============================================================================
  # JOB 5: TESTS POST-D√âPLOIEMENT
  # =============================================================================
  post-deployment-tests:
    name: üß™ Tests Post-D√©ploiement
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: success()
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
        
    - name: üß™ Test Web Server
      run: |
        # R√©cup√©rer l'IP de l'output du job terraform-apply
        INSTANCE_IP="${{ needs.terraform-apply.outputs.instance_ip }}"
        
        # Attendre que le serveur soit pr√™t (Amazon Linux 2023 + user_data)
        echo "‚è≥ Attente du d√©marrage du serveur Amazon Linux 2023..."
        sleep 90
        
        # Test de connectivit√© HTTP sur Amazon Linux 2023
        echo "üåê Test de connectivit√© HTTP (AL2023 + Apache)..."
        for i in {1..15}; do
          if curl -f -s http://$INSTANCE_IP; then
            echo "‚úÖ Serveur web Amazon Linux 2023 accessible!"
            break
          else
            echo "‚è≥ Tentative $i/15 (AL2023 boot + user_data)..."
            sleep 20
          fi
        done
        
        # Test de contenu
        echo "üìÑ Test du contenu..."
        if curl -s http://$INSTANCE_IP | grep -q "Fode-DevOps"; then
          echo "‚úÖ Contenu correct d√©tect√©!"
        else
          echo "‚ùå Contenu incorrect!"
          exit 1
        fi

  # =============================================================================
  # JOB 6: TERRAFORM DESTROY (MANUEL UNIQUEMENT)
  # =============================================================================
  terraform-destroy:
    name: üí• Terraform Destroy
    runs-on: ubuntu-latest
    needs: validation
    if: github.event.inputs.action == 'destroy'
    environment: destruction
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: üîë Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
        chmod 600 ~/.ssh/id_rsa.pub
        # Cr√©er aussi le r√©pertoire keys dans terraform
        mkdir -p ./terraform/keys
        cp ~/.ssh/id_rsa.pub ./terraform/keys/
        
    - name: üîê Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
        
    - name: üì¶ Terraform Init
      working-directory: ./terraform
      run: terraform init
      
    - name: üí• Terraform Destroy
      working-directory: ./terraform
      run: |
        terraform destroy -auto-approve \
          -var="project_name=fode-devops" \
          -var="environment=production" \
          -var="aws_region=${{ env.AWS_DEFAULT_REGION }}" \
          -var="instance_type=t2.micro"
          
    - name: üìä Destruction Summary
      run: |
        echo "## üí• Infrastructure Fode-DevOps D√©truite!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚ö†Ô∏è Toutes les ressources ont √©t√© supprim√©es" >> $GITHUB_STEP_SUMMARY
        echo "- **R√©gion:** ${{ env.AWS_DEFAULT_REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Projet:** fode-devops" >> $GITHUB_STEP_SUMMARY